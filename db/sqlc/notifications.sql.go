// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: notifications.sql

package db

import (
	"context"
	"database/sql"

	uuid "github.com/gofrs/uuid/v5"
)

const createNotificationEvent = `-- name: CreateNotificationEvent :one
INSERT INTO notification_queue (
	message,
	follower_id,
	state_id,
	attempts
) VALUES (
	$1, $2, $3, $4
) RETURNING id, message, follower_id, state_id, attempts, created_at, updated_at
`

type CreateNotificationEventParams struct {
	Message    string
	FollowerID uuid.UUID
	StateID    uuid.UUID
	Attempts   sql.NullInt32
}

func (q *Queries) CreateNotificationEvent(ctx context.Context, arg CreateNotificationEventParams) (NotificationQueue, error) {
	row := q.db.QueryRowContext(ctx, createNotificationEvent,
		arg.Message,
		arg.FollowerID,
		arg.StateID,
		arg.Attempts,
	)
	var i NotificationQueue
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.FollowerID,
		&i.StateID,
		&i.Attempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNotificationState = `-- name: CreateNotificationState :one
INSERT INTO notification_state (
	state
) VALUES (
	$1
) RETURNING id, state, message, requested_at_at, completed_at
`

func (q *Queries) CreateNotificationState(ctx context.Context, state State) (NotificationState, error) {
	row := q.db.QueryRowContext(ctx, createNotificationState, state)
	var i NotificationState
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.Message,
		&i.RequestedAtAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateNotificationStateByID = `-- name: UpdateNotificationStateByID :exec
UPDATE notification_state
SET state = $2, message = $3
WHERE id = $1
`

type UpdateNotificationStateByIDParams struct {
	ID      uuid.UUID
	State   State
	Message sql.NullString
}

func (q *Queries) UpdateNotificationStateByID(ctx context.Context, arg UpdateNotificationStateByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateNotificationStateByID, arg.ID, arg.State, arg.Message)
	return err
}
