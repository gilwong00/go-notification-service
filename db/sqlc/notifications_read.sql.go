// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: notifications_read.sql

package db

import (
	"context"
	"database/sql"
)

const listSendableNotifications = `-- name: ListSendableNotifications :many
SELECT
	notification_queue.message,
	notification_queue.attempts,
	users.url
FROM notification_queue
JOIN followers ON folowers.id = notification_queue.follower_id
JOIN users ON users.id = folowers.follower_id
JOIN notification_state ON notification_state.id = notification_queue.state_id
WHERE users.url IS NOT NULL AND notification_state.state != 'success'
ORDER BY notification_queue.created_at DESC
`

type ListSendableNotificationsRow struct {
	Message  string
	Attempts sql.NullInt32
	Url      sql.NullString
}

func (q *Queries) ListSendableNotifications(ctx context.Context) ([]ListSendableNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSendableNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSendableNotificationsRow{}
	for rows.Next() {
		var i ListSendableNotificationsRow
		if err := rows.Scan(&i.Message, &i.Attempts, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
